"""
This module will be used ot generate large random primes with
the smallest primitive root
"""
from Crypto.Util import number
from Crypto.PublicKey import DSA
import rsa_encoder as r


class RandPrime():
    """
    Takes a number n to generate an n-bit long prime number
    with a corresponding generator

    NOTE: 512 <= n <= 1024
    """

    def __init__(self, n):
        self.n = n
        self.dsa = DSA.generate(self.n)

    def getPrime(self):
        return self.dsa.p

    def getGenerator(self):
        return self.dsa.g


if __name__ == "__main__":
    genprime = RandPrime(1024)
    p = genprime.getPrime()
    g = genprime.getGenerator()
    print(p)
    print(number.isPrime(p))
    print()
    print(g)
    print(r.fast_exp_w_mod(g,p-1,p))

    primes_dict = {}
    for n in range(512, 1088, 64):
        dsa = DSA.generate(n)
        p_g_tuple = (dsa.p, dsa.g)
        primes_dict[str(n)] = p_g_tuple

    print(primes_dict)

PRIMES = {'512': (6703908381269271699777665515301486430940325495831751083983518348587277080009934768580100257389271901528250429809191279701925857791761852446537307403456203,\
 5721480122062316331125709584465055560618495927894896084390606834116211818007745766538076816524758380737967282371126664597515477290641747599979368470175097),\
  '576': (123665200736552267030251260510364015521863621517431341114426147177870319948507570823709422622948813447314753334731538379421353297356744047365846994446970986611462773076558369,\
   123643701351673164158969069052229845882018250960577850531814098868614347087053717709773541237943545539794711429801011478458273060246949784005227781709276359434234453482140252),\
'640': (2281220308811097609320585802850145662446614253667333794597844707240082901381232985004786499261417537739203946118631850827212415849223502470730561142807661757450036356732395938316598564252937161,\
    1665079381523358815543971116141715104871765470427853559433602906399908404942513357646064772951117151122494484081758613939413481383894284545402174430466122643854872381936274422141840632075792638),\
'704': (42081087212387012969002972155615214441936817160652178066738864393407080864104268232219266542067741389302765218257500977493695370770421457851779326631032805697428104225676869017608491636482352100895951662838574029,\
 13335696767138290805050706169766448819006159124589727443484832565261653200226798026960230336053570275399373647290857669064285742370138385942951364341733808895340394136426234773423394053383766412143719910249448438),\
 '768': (776259046150354467574489744231251277666516778036279737648686883980745331447290997645188719009528011780894437123808599011977256488646948030482638705341656108791085061824581165337021191604392308782461153306176190638590114778633297371,\
  165633799315116898742349465809000755441964505908650799802417241929130144023116105917258340926246634432777495432521186984090749745579279151447354161438461240684059267077416275029130877246811177201072024741443108018259127109792709904),\
'832': (14319451972792077814644896353191512704091958836515001973939444617116481473851781249678023636327505199681381016346085301474676560286302947334269228296158364015679394674035929542338587564789125274554822177436263532725770937681552203861051729583408849357,\
 6787213460125382315411059613026711702420747831630944882751049287577098920146840852572014413465901088270212725281457704028178035474438308055375599236025108398972935259968190060012974024867799805256449343073463411866329459764274112320447553360954138376),\
'896': (264147265567832623176169894782841214205133147996811440999482062354219034765079266704968946713971381595058866472199201529505101771877829170026063921423882763687710577452775885527056924003227132462171170946461142817949161922834167182760019761516290422818667933156879921637,\
 111013101309993906478770192699399340996949822640695099295702875964738265087774359305535966687222420669335941619711285833884844769625979676078325942137238578443066194955286059429521497955234050916217113311965296808289684150490286025706530282501221015461421232609614232258),\
'960': (4872657005699999540176691193937594155438113536090925726229728695283578904852132357530073067654518090925111071671980039738319428818984349291471957133788052937066296866966184590257863423917206049161112204708580574550240912244129336558898989737402176749184093845175971897973906267918084594563,\
 4745384971253509058835756319619119186744211371051327460637226249146847742407878456829166173081175821475918477203489480797771500066289105966650905666963044120268948276726832142309642042623011285398147659197785186653397627725561593882043069040309404208935093272355228566817970532876765918261),\
'1024': (89884656743115795405061723225264669743275955886376114930375504238353445769910117884101267203324951238239962832694504108234235288279652522534643897145393320097704389737943904686298523437152336154928635575067042949661453187590965132128932451191069137833943467040427490445274466484299366719987799073135459409237,\
 39768835940474240247744426548908903805520630227112805900555995564104774062548306970730058783346304135402000127267539263893383693177403414572962367215021591875964220669474187323178771161750916265880646472128162764332374316613366083983284464064082339568946252273683083600842620322673309901500471622699327632418)}

# print(primes_dict["512"])
# print(primes_dict["576"])
# print(primes_dict["640"])
# print(primes_dict["704"])
# print(primes_dict["768"])
# print(primes_dict["832"])
# print(primes_dict["896"])
# print(primes_dict["960"])
# print(primes_dict["1024"])
